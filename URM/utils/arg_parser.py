import argparse

def get_argparser():
    parser = argparse.ArgumentParser("LOCA parser", add_help=False)
    parser.add_argument('--exp', default='debug')
    parser.add_argument('--model_name', default='loca_3_shot', type=str)
    parser.add_argument('--seed', default=0, type=int)
    parser.add_argument('--print_iter', default=250, type=int)
    # model
    parser.add_argument('--model', default='loca', type=str)
    parser.add_argument('--residual', default=1, type=int)
    parser.add_argument('--num_enc_layers_2', default=1, type=int)
    parser.add_argument('--num_enc_layers_3', default=1, type=int)
    parser.add_argument('--num_enc_layers', default=3, type=int)
    parser.add_argument('--emb_dim', default=256, type=int)
    parser.add_argument('--pre_norm', action='store_true')
    # prompt encoder
    parser.add_argument('--num_ope_iterative_steps', default=3, type=int, help='prompt refine layers')
    parser.add_argument('--kernel_dim', default=3, type=int)
    parser.add_argument('--num_heads', default=8, type=int)
    parser.add_argument('--num_refine_steps', default=1, type=int, help='prompt encoder layers')
    # CLIP
    parser.add_argument('--clip', default=None, type=str)
    parser.add_argument('--clip_feat', default='global', type=str, choices=['local', 'global'])
    # universal prompt
    parser.add_argument('--universal_prompts_layers', default=4, type=int)
    parser.add_argument('--universal_prompts_refine_layers', default=3, type=int)
    parser.add_argument('--vision_prompts_layers', default=1, type=int)
    parser.add_argument('--vision_prompts_number', default=1, type=int)
    parser.add_argument('--language_prompts_number', default=3, type=int)
    parser.add_argument('--vision_distill_weight', default=0.5, type=float)
    parser.add_argument('--language_distill_weight', default=0.5, type=float)
    parser.add_argument('--universal_vision_prompts_dropout', default=0.1, type=float)
    parser.add_argument('--universal_language_prompts_dropout', default=0.1, type=float)
    parser.add_argument('--no_vanilla_prompt', action='store_true', default=False, help='no benefit')
    # backbone
    parser.add_argument('--backbone', default='resnet50', type=str)
    parser.add_argument('--backbone_type', default='swav', choices=['swav', 'torch'])
    parser.add_argument('--reduction', default=8, type=int)
    parser.add_argument('--fuse_number', default=3, type=int)
    # train
    parser.add_argument('--epochs', default=500, type=int)
    parser.add_argument('--early_stop_epoch', default=400, type=int)
    parser.add_argument('--resume_training', action='store_true')
    parser.add_argument('--lr', default=1e-4, type=float)
    parser.add_argument('--backbone_lr', default=0, type=float)
    parser.add_argument('--lr_drop', default=200, type=int)
    parser.add_argument('--weight_decay', default=1e-4, type=float, help='default: 0.01 in AdamW')
    parser.add_argument('--batch_size', default=4, type=int)
    parser.add_argument('--val_batch_size', default=-1, type=int)
    parser.add_argument('--dropout', default=0.1, type=float)
    parser.add_argument('--max_grad_norm', default=0.1, type=float)
    parser.add_argument('--aux_weight', default=0.3, type=float)
    parser.add_argument('--model_path', default='', help='resume path')
    parser.add_argument('--scheduler', default='step')
    parser.add_argument('--warmup', default=5, type=int)
    # data
    parser.add_argument('--data', default='FSC147')
    parser.add_argument('--data_path', default='/home/ma-user/work/cxn5/dataset/FSC147')
    parser.add_argument('--image_size', default=512, type=int)
    parser.add_argument('--val_data', default='FSC147')
    parser.add_argument('--val_data_path', default='/home/ma-user/work/cxn5/dataset/FSC147')
    parser.add_argument('--val_image_size', default=512, type=int)
    parser.add_argument('--num_objects', default=3, type=int)
    parser.add_argument('--zero_shot', action='store_true')
    parser.add_argument('--tiling_p', default=0.5, type=float)
    parser.add_argument('--num_workers', default=8, type=int)
    return parser
